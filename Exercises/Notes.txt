Section 1
    Lecture 2: 
        + 'pytz' is always installed alongside dependencies when using pip.
        + We need to use the command pip3 when installing to match our python version (in this case 3.7.3)
        + 'django-admin startproject [projectname]': gives you all the boilerplate code needed to start a django project.
            - prob similar to create-react-app
        + manage.py file: runs your project with 'python3 manage.py runserver'
    
    Lecture 3: 
        + Each django application is build up using smaller apps. By itself it is nothing. 
            - In a hypothetical using Google, searching images, Gmail, and searching text are all separate 'apps' completely independent
        + NEVER touch __pychache__ folder files. C based files.
        + __init__.py: usually don't touch
        + settings.py: do NOT reveal secret key to anyone, can be dangerous for project.
            - INSTALLED_APPS: houses the apps that we have created, and tells Python to recognize them.
            - MIDDLEWARE: things like adding facebook authentication may require adding a couple of lines here.
            - DATABASES: can be configured to your specific db.
            - static files can be added later (CSS, JS, etc)
        + urls.py: important file. First file that, when django project is run on server, requests are made to and in turn helps redirect the user to the correct url.
            + urlpatterns: 
        + wsgi.py: 'web service gateway interface'. don't touch this very often

        We will need to continue and create apps to get our models to interact with our database, and outline views for our web interface.

Section 2: Project 1 - Getting the basics done
    + Lecture 5. Our very first django app
        - create apps at the top level of your project along side db.sqlite3 and manage.py
            # Run 'python3 manage.py startapp [appname]'
        - Inside of an app, we have a slightly different file structure: 
            # __init__.py: don't touch
            # admin.py: built-in admin django app is already initiated at the project level.
            # apps.py: config file for app itself (classes, definitions, etc)
            # models.py: defines db models. config it for other things as well. Django automatically translates these to tables.
            # test.py: mostly unit testing.
            # views.py: handles request / response logic (when a user hits a button or gives / fetches data from db)

        We will need to make our project aware of the app(s)
    
    + Lecture 6: Configuring new App
        - when you create a new app, you first need to make sure that our project knows it's there
            # add to INSTALLED_APPS array in settings.py
            # You should also define a view, along with an HttpResponse by importing it from django.http at the top of your views.py in the app.
        - Now we know we need to outline a URL to serve a response in our project urls.py.
            # We can now import our views at the top of this file, and outline a path, the specific view being imported, and a name for it inside a urlpatterns array.
                path('', views.homePageView, name='home')
        - Last we add the app level url to the project level.
            # import with the include method. Add something like the below to the urls array.
                path('', include('hola.urls'))
            # NOTE: The path outlined at the app level is ADDED onto whatever is outlined at the project level. If the path is 'home' at the app level and 'namaste' at the project level, then the path will be served when 'namaste/home' is hit.
    
    + Lecture 7: Project 2 and templating basics
        - Create a project, add a templates folder, and add a view (home.html) inside
            # What we want to do is create a basic template that can reuse other views or templates.
        - We now need to let the app know about the templates we just created. 
            # Go to the settings.py at the app level and add the folder to the TEMPLATES array, 'DIR' array.
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
    
    + Lecture 8: Rendering from a HTML page
        - in views we want to start a template, so we can import 'from django.views.generic import TemplateView'
        - We can create a class-based django url: 
            class HomePageView(TemplateView): 
                template_name = 'home.html'
        - Now we need to tell our urls.py at the app level to import from views, which imports from templates.

        At the project level, urls.py connects to the app level urls. At the app level, urls.py imports from views.py. views.py now looks in the templates folder to find html templates.

    + Lecture 9: Adding an About Us page
        - create a new template with HTML and name accordingly.
        - Go into views.py and create a separate class for this view template.
        - Go to urls.py at app level and add the URL, serving the class you just created accordingly from the urlpatterns array

    + Lecture 10: Adding Contact Us page

    + Lecture 11: Extending pre-build templates
        - Something like a navbar will need to redirect links to other URLs.
            # Use anchor tags, and in the href quotes: {% url [name of Url as stated in urls.py] %}
            # Here, 'url' is essentially a command, with the name of the url as an argument.
            # You also want to put this in the html file(s) wherever the navbar in this case will need to be positioned on the other templates.
                at the top (or wherever you'd like the reused template HTML to go) of home.html, this will look like: 
                    {% extends '[path to reused html template]' %}
            # Last, the below code serves to reserve space in the template(..?) based on where these are going to be used.
            {%  block content %}
                [html for the page extending navbar]
            {% endblock %}

            NOTE: if you don't put the HTML within the block content tags like above, the HTML will not get rendered.

Section 4: Project 3 - Interaction with Database
    Lecture 12. Setting up command project
        - You will be writing all of your database commands (fetch, insert, ) in the models.py, then incorporate that in the admin.py.
    
    Lecture 13. Creating our first model for sqlite3
        - The purpose of the migrate command is to create database tables based off of Django's default settings.
            + run python3 manage.py migrate the first time.
        - When you add a model to models.py, you need to re-run a migration with 
            python3 manage.py makemigrations cmdr
            python3 manage.py migrate cmdr
        - Generating admin credentials
            + 'python3 manage.py createsuperuser'
    
    Lecture 14: Registering models to admin
        - After creating a model in models.py, you need to register it in the app admin file like so:
            from .models import [modelClassName]
            admin.site.register([modelClassName])
        - After adding the above to admin.py, you can log into the admin pages using your super user credentials, and actually manually add instances of your class. 

        NOTE THAT THIS IS A SINGLE PAGE APPLICATION

    Lecture 15: Create Read Update and Delete from Database
        - It's important to note that similar to handlebars or React mapping, we can add logic to our templates to loop and render HTML elements based off data from a database (or whatever else)
        - Remember that {% %} essentially 'escapes' the html, put whatever you want to repeat within that, and end it with {% endfor %}

Section 5: Project 4 - Blog with static pages and Unique URL
    Lecture 16 - Articles app creation
    
    Lecture 17 - ForeignKey and ManyToOne relationships
        + We created an article model inside the models.py file
    
    Lecture 18 - Adding articles in database
        + We run a makemigrations for the articles app to include the class we made
        + We then run a migration for the whole app
        + We created superuser admin admin for this.
        + We also needed to add the model created to the admin.py by importing it from .models, and registering it.
        + Lastly, we added two articles of our choice within the admin interface on the app.
    
    Lecture 19 - Configuring URLs
        + Now instead of the default Django page, we need to point it to our app.
        + In our urls.py at the project level, we included the URLs we are about to create in the articles app.
        + We created another urls.py within our application.
            + In this, make sure you import all of your views.
        + In our views.py, we created a ArticleListView which will use our Article model, and use a home.html template.
            - Create this inside of a new templates folder at the project level
            - We also created a base.html.
        + Lastly, make sure you incorporate these new templates into the settings.py file at the project level inside the TEMPLATES arr.

    Lecture 20 - Setting up Home Page
        + We added some boilerplate html to base.html with a content block.
        + We extended base.html in home.html, and created another block content to loop through the articles and print them.

    Lecture 21 - Adding Static files for CSS
        + Created a 'static' folder at project level (similar to templates) and included that in a STATICFILES_DIR array at the bottom of the settings.py file.
        + Added a css folder inside the static folder along with a css file to add.
            - Added some styles.
        + Linked that css file up with the basestyles.html file with a Link tag. In the href you have to use curly braces and the two percent signs like so: 
            {% static 'css/basestyles.css' %}
        + At the top of the html file, you need to give it a heads up that it needs to expect a static css file with: 
            {% load staticfiles %}
    
    Lecture 22 - Unique URL for articles
        + created a new detailed view for the articles.
            - Changed the context name to articles so that we can use that when we need to access them.
        + added detail.html along with some html and script to templates folder.
        + Add the url to the app level urls.py like so
             path('article/<int:pk>', views.ArticleDetailView.as_view(), name='article'),
             - pk is primary key which django automatically generates

Section 6
    Project 5 - Handling forms and taking input from user
        Lecture 23: Handling user input via forms - setup
            - Made a folder '05projectfive' and started a project within.
            - Navigate into project and migrate the database.
            - Start a new application.
            - Go to the project settings.py file and include the new app.
            - add a urls.py to the app level along with any routes you plan to use from your views.py file. We will be adding these in the next lecture.
        
        Lecture 24: Preparing models and admin
            - We added a Video model with a title, datetime, and description fields. Lastly, we added it's constructor __str__ function.
            - We imported and registered this new model in the admin.py file.

        Lecture 25: Fixing views and other issues
            - created a templates and static folders, as our app will be completely separate from the rest of the project.
                + added a videorequest folder in each of those folders, per standard practice.
            - added static files and templates to the respective folders from his github.
            - Add views in a functional manner (not class-based).
            - make sure you import . from views at your app level urls.py file.
            - now you can make your migration at the app level, then at the project level.
            - Lastly, you'll need to incorporate your static folder files into their respective HTML templates by taking care of the link tag(s) and the static injection at the top of each template.
            - Also make your superuser. (admin/admin)

NOTE: Urls take a url endpoint being hit, and determines which VIEW to send the user. Each VIEW determines which html TEMPLATE to send.

        Lecture 26: Making templates look great and static files
            - Migrations are available once run, which are essentially database queries that are run for you. You cannot just manually change these and expect results.
            - Changing a model after migration: 
                + Make the change. Run your makemigrations command (this creates a new migration in the migrations folder). Then officially migrate the whole project.
                + Note that the first migration is a dependency of the second.
            - Incorporating static files into templates:
                + Ensure that {% load static %} is at the top of each.
                + You can then import files within the static folder. {% static 'staticSubfolder/yourFile.css' %}
            - We changed the href field for the Add Video form to {% url 'vrform' %}
                + Remember vrform was the same name that we gave to our vrform url in our urls.py.
                + Whats the point of names? When I changed it, the link still led me to the page...?
            - We also manually added a Video using the admin dashboard.

        Lecture 27: Fetching data from a database
            - First thing we need to do: go to views.py and import the model that we intend to use (Video), so that we may use that model to display to our templates while looping over all the videos in our db.
            - Add that to the route (index) and assign it to a variable. You can order the videos by a field with the .order_by('fieldNameOnClass')
            - Store that as a key value pair in context in that same route and pass it to the render function.
            - The variable you store the videos in is what you have to reference in your html template inside your logic loop. Inside your logic you can access the fields on the models with their respective names.

        Lecture 28: Interaction with Django forms
            - We will have to add another python file for the form at the app level (videoRequest)
                + It will take the form of a class within forms.py.
            - What I think the idea is is basically to hook up your form(s) to a particular template (html within a template file). This in turn basically becomes a class with data fields connected to it that can be passed around.
            - add {% csrf_token %} to forms containing action methods for security inside the form.
            - You're essentially replacing hard coded html with class fields on your forms outlined in forms.py. 

        Lecture 29: Taking input from user and storing it in database.
            - Forms are classes in forms.py, being rendered by the html templates in the templates folder, served by the views.py file.
            - When the request is thrown back, it will hit the view, where you need to extract the fields needed into a new model (Video, in this case).
            - Fields in the request are coming from what you name them in the forms.py

Section 7 - Project 6: A CRUD blog from user input
    Lecture 30: Jump Start of CRUD project
        - Copied and pasted 'website' from project4.
        - Added a div with an anchor to base.html.
            + We need to add the URL to urls.py, with a name corresponding to what we put inside the href field (new_article)
            + But we need a matching class-based view due to us putting 'new_article' in the anchor href.
        
    Lecture 31: Reusing admin fields in web page
        - We're importing a view this time (instead of creating our own like last project)
        - We imported CreateView from django, and outlined the fields model (Article), template_name (new_article.html, which we need to create), and fields
        - Add the article_new.html to templates along with a form with POST action and csrf token within
        - You need to go back to the Article model in order to redirect users once the form is submitted to the home page using reverse()

    Lecture 32: Update from database
        - Next we need to be able to edit an article, which means that we need to make sure that we pass something unique along with the article information when we click on its title.
            + This is done through the primary key (PKI)
        - We went into the detail.html (template for each articles details) and added a link with a URL. We also gave that link an argument, which was the article's primary key.
        - Now we need to create a new template to render when that link is hit (article_edit.html)
            + Don't forget csrf token in ALL forms
        - Next, create the view for it. Go to your views.py, and there is an UpdateView template to import.
            + Since we don't need ALL fields, we use an array to hold the fields we want.
            + These fields come from the model.

    Lecture 33: Delete from database and reverse lazy URLs
        - Now we must figure out the delete functionality
        - you must add a link on another page to the template, so we did that by adding a delete button to the article detail.html page.
        - we first added an article_delete.html template with block content and CSRF token stuff.
            + form
        - Now that we have a link to access the template, we need to outline the url in our urls.py.
            + Make sure you name it whatever you outlined in the link.
        - Now that we've outlined the url, we need a class-based view. 
            + So we made ArticleDeleteView and imported the deleteView thing from django.urls
            + reverse_lazy allows us to redirect to a page AFTER the action is completed.

Section 8 - Project 7 - A TODO list with sqlite3
    Lecture 34: How we will take down this TODO project
        - First thing we do is create a folder for project 07
        - Then we initialize the new project with django-admin startproject [projectname]
        - Then we change directories into the project (make sure you are at the manage.py level) and initialize the todo app with python3 manage.py startapp [appname]
        - Now we have to register our app at the project level by adding the appname (todo) to the list of registered apps at the project level list.
            + You also must register the urls for the todo app. Make sure you import 'include' and add that to the project urls.py.
            + Add the urls.py file to your app level.
        - In your urls.py at the app level, import views.
        - We are, in our views, defining an index function which returns a simple HTTP response 

    Lecture 35: Create models for database
        - We create a todo class model for the database and outline the fields we want to include, what type of field they are, and then have the model return itself.
        - Once you are done with your model, import and register it into the admin.py file.
        - Then we run our migrations
            + python3 manage.py migrate
            + python3 manage.py makemigrations [appname]
            + python3 manage.py migrate
        - Create your superuser (admin/admin)
        - We logged in as the admin user and added a couple of todos manually
    
    Lecture 36: setting up templates and static files
        - We added a templates and static folders with an app folder within each, and moved our static files into them.
        - Then, we went to our index.html and loaded static files at the top and changed the paths within
        - Last, we changed our home page response to simply serve the static index.html page from the templates folder using render and passing in the request and path to template.

    Lecture 37: Adding a todo and decorator
        - We started by adding a forms.py in which we outlined a TodoForm. What this should do is mimic the template html (including classes, placeholders, etc)
        - This is the HTML template portion that should interface similarly with your Todo model in models.py
        - essentially what it seems like we are doing is, within the views.py, we are creating a whole schema to display and grab objects from the database at the same time. When the index.html route is hit, we understand that the Todo objects from the database need to be grabbed and ordered. We also realize that we need a form to display to the user, and we can consolidate these and pass them down to the user through context.
        - We used a decorator on and added another view that allows todos to be added and saved through a POST method.

    Lecture 38: Finishing up TODO
        - Next, we have to make a view for completing a todo.
            + We're going to do this by accessing the primary key of the objects on the Todo model within the database from the request.
            + We then simply change the completed attribute we defined on the model to True.
        - We then outline a delete todo view and access any completed todos with a filter, and delete them, then redirect to the index.html
        - Once we are done, we need to add these things to the urls.py.
            + This still won't work yet.
            + We need to revise our index.html template to include the form that we built.

Section 9 - Project 8: Login, Logout and SignUp
    Lecture 39: Setup URL for Login
        - authentication should be thought of before an app is developed. What do you want to show a user who is NOT logged in, and what do you want to show them when they are?
        - For this project, we are going to use the website from Project 4 as a template.
        - The auth portion of django is actually a pre-installed functionality with django (similar to admin)
        - With whatever route you choose for your accounts endpoint, you must 
            + include('django.contrib.auth.urls') should be the second argument.

    Lecture 40: Having a login view
        - So because we added the accounts endpoint, now Django will look for a login template in your templates.
            + Here we added a new 'registration' folder to the templates folder along with a login.html file inside. 
                = These are the default names for the files that Django looks for.
        - In login.html we added template stuffs and a form for login, with a submit (login) button
            + we use {{ form.as_p }} tp format the form as a paragraph tag..?
        - At the bottom of the settings.py file, we need to specify where to redirect the user once they've logged in successfully.
            + In this case, we are redirecting them to the articles home 'home'.
    
    Lecture 41: A working login and Logout
        - 